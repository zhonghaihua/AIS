/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.tencent.ais.communication.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-01")
public class ResourceMessage implements org.apache.thrift.TBase<ResourceMessage, ResourceMessage._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceMessage");

  private static final org.apache.thrift.protocol.TField TOTALCPU_FIELD_DESC = new org.apache.thrift.protocol.TField("totalcpu", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FREECPU_FIELD_DESC = new org.apache.thrift.protocol.TField("freecpu", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BUSYCPU_FIELD_DESC = new org.apache.thrift.protocol.TField("busycpu", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTALMEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalmemory", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FREEMEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("freememory", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PLATFORM_FREECPU_FIELD_DESC = new org.apache.thrift.protocol.TField("platformFreecpu", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PLATFORM_FREEMEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("platformFreememory", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceMessageTupleSchemeFactory();

  public int totalcpu; // required
  public int freecpu; // required
  public int busycpu; // required
  public int totalmemory; // required
  public int freememory; // required
  public int platformFreecpu; // required
  public int platformFreememory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTALCPU((short)1, "totalcpu"),
    FREECPU((short)2, "freecpu"),
    BUSYCPU((short)3, "busycpu"),
    TOTALMEMORY((short)4, "totalmemory"),
    FREEMEMORY((short)5, "freememory"),
    PLATFORM_FREECPU((short)6, "platformFreecpu"),
    PLATFORM_FREEMEMORY((short)7, "platformFreememory");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTALCPU
          return TOTALCPU;
        case 2: // FREECPU
          return FREECPU;
        case 3: // BUSYCPU
          return BUSYCPU;
        case 4: // TOTALMEMORY
          return TOTALMEMORY;
        case 5: // FREEMEMORY
          return FREEMEMORY;
        case 6: // PLATFORM_FREECPU
          return PLATFORM_FREECPU;
        case 7: // PLATFORM_FREEMEMORY
          return PLATFORM_FREEMEMORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALCPU_ISSET_ID = 0;
  private static final int __FREECPU_ISSET_ID = 1;
  private static final int __BUSYCPU_ISSET_ID = 2;
  private static final int __TOTALMEMORY_ISSET_ID = 3;
  private static final int __FREEMEMORY_ISSET_ID = 4;
  private static final int __PLATFORMFREECPU_ISSET_ID = 5;
  private static final int __PLATFORMFREEMEMORY_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTALCPU, new org.apache.thrift.meta_data.FieldMetaData("totalcpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREECPU, new org.apache.thrift.meta_data.FieldMetaData("freecpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSYCPU, new org.apache.thrift.meta_data.FieldMetaData("busycpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTALMEMORY, new org.apache.thrift.meta_data.FieldMetaData("totalmemory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREEMEMORY, new org.apache.thrift.meta_data.FieldMetaData("freememory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORM_FREECPU, new org.apache.thrift.meta_data.FieldMetaData("platformFreecpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORM_FREEMEMORY, new org.apache.thrift.meta_data.FieldMetaData("platformFreememory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceMessage.class, metaDataMap);
  }

  public ResourceMessage() {
  }

  public ResourceMessage(
    int totalcpu,
    int freecpu,
    int busycpu,
    int totalmemory,
    int freememory,
    int platformFreecpu,
    int platformFreememory)
  {
    this();
    this.totalcpu = totalcpu;
    setTotalcpuIsSet(true);
    this.freecpu = freecpu;
    setFreecpuIsSet(true);
    this.busycpu = busycpu;
    setBusycpuIsSet(true);
    this.totalmemory = totalmemory;
    setTotalmemoryIsSet(true);
    this.freememory = freememory;
    setFreememoryIsSet(true);
    this.platformFreecpu = platformFreecpu;
    setPlatformFreecpuIsSet(true);
    this.platformFreememory = platformFreememory;
    setPlatformFreememoryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceMessage(ResourceMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalcpu = other.totalcpu;
    this.freecpu = other.freecpu;
    this.busycpu = other.busycpu;
    this.totalmemory = other.totalmemory;
    this.freememory = other.freememory;
    this.platformFreecpu = other.platformFreecpu;
    this.platformFreememory = other.platformFreememory;
  }

  public ResourceMessage deepCopy() {
    return new ResourceMessage(this);
  }

  @Override
  public void clear() {
    setTotalcpuIsSet(false);
    this.totalcpu = 0;
    setFreecpuIsSet(false);
    this.freecpu = 0;
    setBusycpuIsSet(false);
    this.busycpu = 0;
    setTotalmemoryIsSet(false);
    this.totalmemory = 0;
    setFreememoryIsSet(false);
    this.freememory = 0;
    setPlatformFreecpuIsSet(false);
    this.platformFreecpu = 0;
    setPlatformFreememoryIsSet(false);
    this.platformFreememory = 0;
  }

  public int getTotalcpu() {
    return this.totalcpu;
  }

  public ResourceMessage setTotalcpu(int totalcpu) {
    this.totalcpu = totalcpu;
    setTotalcpuIsSet(true);
    return this;
  }

  public void unsetTotalcpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCPU_ISSET_ID);
  }

  /** Returns true if field totalcpu is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalcpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCPU_ISSET_ID);
  }

  public void setTotalcpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCPU_ISSET_ID, value);
  }

  public int getFreecpu() {
    return this.freecpu;
  }

  public ResourceMessage setFreecpu(int freecpu) {
    this.freecpu = freecpu;
    setFreecpuIsSet(true);
    return this;
  }

  public void unsetFreecpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREECPU_ISSET_ID);
  }

  /** Returns true if field freecpu is set (has been assigned a value) and false otherwise */
  public boolean isSetFreecpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREECPU_ISSET_ID);
  }

  public void setFreecpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREECPU_ISSET_ID, value);
  }

  public int getBusycpu() {
    return this.busycpu;
  }

  public ResourceMessage setBusycpu(int busycpu) {
    this.busycpu = busycpu;
    setBusycpuIsSet(true);
    return this;
  }

  public void unsetBusycpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUSYCPU_ISSET_ID);
  }

  /** Returns true if field busycpu is set (has been assigned a value) and false otherwise */
  public boolean isSetBusycpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUSYCPU_ISSET_ID);
  }

  public void setBusycpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUSYCPU_ISSET_ID, value);
  }

  public int getTotalmemory() {
    return this.totalmemory;
  }

  public ResourceMessage setTotalmemory(int totalmemory) {
    this.totalmemory = totalmemory;
    setTotalmemoryIsSet(true);
    return this;
  }

  public void unsetTotalmemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALMEMORY_ISSET_ID);
  }

  /** Returns true if field totalmemory is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalmemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALMEMORY_ISSET_ID);
  }

  public void setTotalmemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALMEMORY_ISSET_ID, value);
  }

  public int getFreememory() {
    return this.freememory;
  }

  public ResourceMessage setFreememory(int freememory) {
    this.freememory = freememory;
    setFreememoryIsSet(true);
    return this;
  }

  public void unsetFreememory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEMEMORY_ISSET_ID);
  }

  /** Returns true if field freememory is set (has been assigned a value) and false otherwise */
  public boolean isSetFreememory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEMEMORY_ISSET_ID);
  }

  public void setFreememoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEMEMORY_ISSET_ID, value);
  }

  public int getPlatformFreecpu() {
    return this.platformFreecpu;
  }

  public ResourceMessage setPlatformFreecpu(int platformFreecpu) {
    this.platformFreecpu = platformFreecpu;
    setPlatformFreecpuIsSet(true);
    return this;
  }

  public void unsetPlatformFreecpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLATFORMFREECPU_ISSET_ID);
  }

  /** Returns true if field platformFreecpu is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformFreecpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLATFORMFREECPU_ISSET_ID);
  }

  public void setPlatformFreecpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLATFORMFREECPU_ISSET_ID, value);
  }

  public int getPlatformFreememory() {
    return this.platformFreememory;
  }

  public ResourceMessage setPlatformFreememory(int platformFreememory) {
    this.platformFreememory = platformFreememory;
    setPlatformFreememoryIsSet(true);
    return this;
  }

  public void unsetPlatformFreememory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLATFORMFREEMEMORY_ISSET_ID);
  }

  /** Returns true if field platformFreememory is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformFreememory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLATFORMFREEMEMORY_ISSET_ID);
  }

  public void setPlatformFreememoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLATFORMFREEMEMORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTALCPU:
      if (value == null) {
        unsetTotalcpu();
      } else {
        setTotalcpu((Integer)value);
      }
      break;

    case FREECPU:
      if (value == null) {
        unsetFreecpu();
      } else {
        setFreecpu((Integer)value);
      }
      break;

    case BUSYCPU:
      if (value == null) {
        unsetBusycpu();
      } else {
        setBusycpu((Integer)value);
      }
      break;

    case TOTALMEMORY:
      if (value == null) {
        unsetTotalmemory();
      } else {
        setTotalmemory((Integer)value);
      }
      break;

    case FREEMEMORY:
      if (value == null) {
        unsetFreememory();
      } else {
        setFreememory((Integer)value);
      }
      break;

    case PLATFORM_FREECPU:
      if (value == null) {
        unsetPlatformFreecpu();
      } else {
        setPlatformFreecpu((Integer)value);
      }
      break;

    case PLATFORM_FREEMEMORY:
      if (value == null) {
        unsetPlatformFreememory();
      } else {
        setPlatformFreememory((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTALCPU:
      return getTotalcpu();

    case FREECPU:
      return getFreecpu();

    case BUSYCPU:
      return getBusycpu();

    case TOTALMEMORY:
      return getTotalmemory();

    case FREEMEMORY:
      return getFreememory();

    case PLATFORM_FREECPU:
      return getPlatformFreecpu();

    case PLATFORM_FREEMEMORY:
      return getPlatformFreememory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTALCPU:
      return isSetTotalcpu();
    case FREECPU:
      return isSetFreecpu();
    case BUSYCPU:
      return isSetBusycpu();
    case TOTALMEMORY:
      return isSetTotalmemory();
    case FREEMEMORY:
      return isSetFreememory();
    case PLATFORM_FREECPU:
      return isSetPlatformFreecpu();
    case PLATFORM_FREEMEMORY:
      return isSetPlatformFreememory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceMessage)
      return this.equals((ResourceMessage)that);
    return false;
  }

  public boolean equals(ResourceMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_totalcpu = true;
    boolean that_present_totalcpu = true;
    if (this_present_totalcpu || that_present_totalcpu) {
      if (!(this_present_totalcpu && that_present_totalcpu))
        return false;
      if (this.totalcpu != that.totalcpu)
        return false;
    }

    boolean this_present_freecpu = true;
    boolean that_present_freecpu = true;
    if (this_present_freecpu || that_present_freecpu) {
      if (!(this_present_freecpu && that_present_freecpu))
        return false;
      if (this.freecpu != that.freecpu)
        return false;
    }

    boolean this_present_busycpu = true;
    boolean that_present_busycpu = true;
    if (this_present_busycpu || that_present_busycpu) {
      if (!(this_present_busycpu && that_present_busycpu))
        return false;
      if (this.busycpu != that.busycpu)
        return false;
    }

    boolean this_present_totalmemory = true;
    boolean that_present_totalmemory = true;
    if (this_present_totalmemory || that_present_totalmemory) {
      if (!(this_present_totalmemory && that_present_totalmemory))
        return false;
      if (this.totalmemory != that.totalmemory)
        return false;
    }

    boolean this_present_freememory = true;
    boolean that_present_freememory = true;
    if (this_present_freememory || that_present_freememory) {
      if (!(this_present_freememory && that_present_freememory))
        return false;
      if (this.freememory != that.freememory)
        return false;
    }

    boolean this_present_platformFreecpu = true;
    boolean that_present_platformFreecpu = true;
    if (this_present_platformFreecpu || that_present_platformFreecpu) {
      if (!(this_present_platformFreecpu && that_present_platformFreecpu))
        return false;
      if (this.platformFreecpu != that.platformFreecpu)
        return false;
    }

    boolean this_present_platformFreememory = true;
    boolean that_present_platformFreememory = true;
    if (this_present_platformFreememory || that_present_platformFreememory) {
      if (!(this_present_platformFreememory && that_present_platformFreememory))
        return false;
      if (this.platformFreememory != that.platformFreememory)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + totalcpu;

    hashCode = hashCode * 8191 + freecpu;

    hashCode = hashCode * 8191 + busycpu;

    hashCode = hashCode * 8191 + totalmemory;

    hashCode = hashCode * 8191 + freememory;

    hashCode = hashCode * 8191 + platformFreecpu;

    hashCode = hashCode * 8191 + platformFreememory;

    return hashCode;
  }

  @Override
  public int compareTo(ResourceMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalcpu()).compareTo(other.isSetTotalcpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalcpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalcpu, other.totalcpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreecpu()).compareTo(other.isSetFreecpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreecpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freecpu, other.freecpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusycpu()).compareTo(other.isSetBusycpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusycpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busycpu, other.busycpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalmemory()).compareTo(other.isSetTotalmemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalmemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalmemory, other.totalmemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreememory()).compareTo(other.isSetFreememory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreememory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freememory, other.freememory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformFreecpu()).compareTo(other.isSetPlatformFreecpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformFreecpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformFreecpu, other.platformFreecpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformFreememory()).compareTo(other.isSetPlatformFreememory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformFreememory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformFreememory, other.platformFreememory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourceMessage(");
    boolean first = true;

    sb.append("totalcpu:");
    sb.append(this.totalcpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freecpu:");
    sb.append(this.freecpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("busycpu:");
    sb.append(this.busycpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalmemory:");
    sb.append(this.totalmemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freememory:");
    sb.append(this.freememory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformFreecpu:");
    sb.append(this.platformFreecpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformFreememory:");
    sb.append(this.platformFreememory);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'totalcpu' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'freecpu' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'busycpu' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalmemory' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'freememory' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'platformFreecpu' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'platformFreememory' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResourceMessageStandardScheme getScheme() {
      return new ResourceMessageStandardScheme();
    }
  }

  private static class ResourceMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTALCPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalcpu = iprot.readI32();
              struct.setTotalcpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FREECPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freecpu = iprot.readI32();
              struct.setFreecpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSYCPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.busycpu = iprot.readI32();
              struct.setBusycpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTALMEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalmemory = iprot.readI32();
              struct.setTotalmemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREEMEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freememory = iprot.readI32();
              struct.setFreememoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLATFORM_FREECPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformFreecpu = iprot.readI32();
              struct.setPlatformFreecpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLATFORM_FREEMEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformFreememory = iprot.readI32();
              struct.setPlatformFreememoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalcpu()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalcpu' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFreecpu()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'freecpu' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBusycpu()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'busycpu' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalmemory()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalmemory' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFreememory()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'freememory' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPlatformFreecpu()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'platformFreecpu' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPlatformFreememory()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'platformFreememory' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTALCPU_FIELD_DESC);
      oprot.writeI32(struct.totalcpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREECPU_FIELD_DESC);
      oprot.writeI32(struct.freecpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSYCPU_FIELD_DESC);
      oprot.writeI32(struct.busycpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTALMEMORY_FIELD_DESC);
      oprot.writeI32(struct.totalmemory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREEMEMORY_FIELD_DESC);
      oprot.writeI32(struct.freememory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLATFORM_FREECPU_FIELD_DESC);
      oprot.writeI32(struct.platformFreecpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLATFORM_FREEMEMORY_FIELD_DESC);
      oprot.writeI32(struct.platformFreememory);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResourceMessageTupleScheme getScheme() {
      return new ResourceMessageTupleScheme();
    }
  }

  private static class ResourceMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.totalcpu);
      oprot.writeI32(struct.freecpu);
      oprot.writeI32(struct.busycpu);
      oprot.writeI32(struct.totalmemory);
      oprot.writeI32(struct.freememory);
      oprot.writeI32(struct.platformFreecpu);
      oprot.writeI32(struct.platformFreememory);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.totalcpu = iprot.readI32();
      struct.setTotalcpuIsSet(true);
      struct.freecpu = iprot.readI32();
      struct.setFreecpuIsSet(true);
      struct.busycpu = iprot.readI32();
      struct.setBusycpuIsSet(true);
      struct.totalmemory = iprot.readI32();
      struct.setTotalmemoryIsSet(true);
      struct.freememory = iprot.readI32();
      struct.setFreememoryIsSet(true);
      struct.platformFreecpu = iprot.readI32();
      struct.setPlatformFreecpuIsSet(true);
      struct.platformFreememory = iprot.readI32();
      struct.setPlatformFreememoryIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

