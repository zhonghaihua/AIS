/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.tencent.ais.communication.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-17")
public class TaskMessage implements org.apache.thrift.TBase<TaskMessage, TaskMessage._Fields>, java.io.Serializable, Cloneable, Comparable<TaskMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskMessage");

  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ALGO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("algoId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLATFORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("platformId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFormat", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARAMETER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterPath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PACKAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("packagePath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SUBMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TASK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("taskInfo", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ALGO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algoName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACCESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessStatus", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField ACCESS_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessProgress", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ALGO_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("algoDescription", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField MPIMACHINE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mpimachineList", org.apache.thrift.protocol.TType.LIST, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskMessageTupleSchemeFactory();

  public int dataType; // required
  public int taskId; // required
  public int algoId; // required
  public int platformId; // required
  public String inputFormat; // required
  public String inputPath; // required
  public String outputPath; // required
  public String parameterPath; // required
  public String packagePath; // required
  public int taskType; // required
  public String submitTime; // required
  public String startTime; // required
  public String endTime; // required
  public String modifyTime; // required
  public int status; // required
  public int rate; // required
  public String errMsg; // required
  public int userId; // required
  public String taskInfo; // required
  public int accessId; // required
  public String algoName; // required
  public int accessStatus; // required
  public int accessProgress; // required
  public String algoDescription; // required
  public java.util.List<String> mpimachineList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_TYPE((short)1, "dataType"),
    TASK_ID((short)2, "taskId"),
    ALGO_ID((short)3, "algoId"),
    PLATFORM_ID((short)4, "platformId"),
    INPUT_FORMAT((short)5, "inputFormat"),
    INPUT_PATH((short)6, "inputPath"),
    OUTPUT_PATH((short)7, "outputPath"),
    PARAMETER_PATH((short)8, "parameterPath"),
    PACKAGE_PATH((short)9, "packagePath"),
    TASK_TYPE((short)10, "taskType"),
    SUBMIT_TIME((short)11, "submitTime"),
    START_TIME((short)12, "startTime"),
    END_TIME((short)13, "endTime"),
    MODIFY_TIME((short)14, "modifyTime"),
    STATUS((short)15, "status"),
    RATE((short)16, "rate"),
    ERR_MSG((short)17, "errMsg"),
    USER_ID((short)18, "userId"),
    TASK_INFO((short)19, "taskInfo"),
    ACCESS_ID((short)20, "accessId"),
    ALGO_NAME((short)21, "algoName"),
    ACCESS_STATUS((short)22, "accessStatus"),
    ACCESS_PROGRESS((short)23, "accessProgress"),
    ALGO_DESCRIPTION((short)24, "algoDescription"),
    MPIMACHINE_LIST((short)25, "mpimachineList");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_TYPE
          return DATA_TYPE;
        case 2: // TASK_ID
          return TASK_ID;
        case 3: // ALGO_ID
          return ALGO_ID;
        case 4: // PLATFORM_ID
          return PLATFORM_ID;
        case 5: // INPUT_FORMAT
          return INPUT_FORMAT;
        case 6: // INPUT_PATH
          return INPUT_PATH;
        case 7: // OUTPUT_PATH
          return OUTPUT_PATH;
        case 8: // PARAMETER_PATH
          return PARAMETER_PATH;
        case 9: // PACKAGE_PATH
          return PACKAGE_PATH;
        case 10: // TASK_TYPE
          return TASK_TYPE;
        case 11: // SUBMIT_TIME
          return SUBMIT_TIME;
        case 12: // START_TIME
          return START_TIME;
        case 13: // END_TIME
          return END_TIME;
        case 14: // MODIFY_TIME
          return MODIFY_TIME;
        case 15: // STATUS
          return STATUS;
        case 16: // RATE
          return RATE;
        case 17: // ERR_MSG
          return ERR_MSG;
        case 18: // USER_ID
          return USER_ID;
        case 19: // TASK_INFO
          return TASK_INFO;
        case 20: // ACCESS_ID
          return ACCESS_ID;
        case 21: // ALGO_NAME
          return ALGO_NAME;
        case 22: // ACCESS_STATUS
          return ACCESS_STATUS;
        case 23: // ACCESS_PROGRESS
          return ACCESS_PROGRESS;
        case 24: // ALGO_DESCRIPTION
          return ALGO_DESCRIPTION;
        case 25: // MPIMACHINE_LIST
          return MPIMACHINE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATATYPE_ISSET_ID = 0;
  private static final int __TASKID_ISSET_ID = 1;
  private static final int __ALGOID_ISSET_ID = 2;
  private static final int __PLATFORMID_ISSET_ID = 3;
  private static final int __TASKTYPE_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __RATE_ISSET_ID = 6;
  private static final int __USERID_ISSET_ID = 7;
  private static final int __ACCESSID_ISSET_ID = 8;
  private static final int __ACCESSSTATUS_ISSET_ID = 9;
  private static final int __ACCESSPROGRESS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALGO_ID, new org.apache.thrift.meta_data.FieldMetaData("algoId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORM_ID, new org.apache.thrift.meta_data.FieldMetaData("platformId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("inputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER_PATH, new org.apache.thrift.meta_data.FieldMetaData("parameterPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("packagePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_INFO, new org.apache.thrift.meta_data.FieldMetaData("taskInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("accessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALGO_NAME, new org.apache.thrift.meta_data.FieldMetaData("algoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("accessStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("accessProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALGO_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("algoDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MPIMACHINE_LIST, new org.apache.thrift.meta_data.FieldMetaData("mpimachineList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskMessage.class, metaDataMap);
  }

  public TaskMessage() {
  }

  public TaskMessage(
    int dataType,
    int taskId,
    int algoId,
    int platformId,
    String inputFormat,
    String inputPath,
    String outputPath,
    String parameterPath,
    String packagePath,
    int taskType,
    String submitTime,
    String startTime,
    String endTime,
    String modifyTime,
    int status,
    int rate,
    String errMsg,
    int userId,
    String taskInfo,
    int accessId,
    String algoName,
    int accessStatus,
    int accessProgress,
    String algoDescription,
    java.util.List<String> mpimachineList)
  {
    this();
    this.dataType = dataType;
    setDataTypeIsSet(true);
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.algoId = algoId;
    setAlgoIdIsSet(true);
    this.platformId = platformId;
    setPlatformIdIsSet(true);
    this.inputFormat = inputFormat;
    this.inputPath = inputPath;
    this.outputPath = outputPath;
    this.parameterPath = parameterPath;
    this.packagePath = packagePath;
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    this.submitTime = submitTime;
    this.startTime = startTime;
    this.endTime = endTime;
    this.modifyTime = modifyTime;
    this.status = status;
    setStatusIsSet(true);
    this.rate = rate;
    setRateIsSet(true);
    this.errMsg = errMsg;
    this.userId = userId;
    setUserIdIsSet(true);
    this.taskInfo = taskInfo;
    this.accessId = accessId;
    setAccessIdIsSet(true);
    this.algoName = algoName;
    this.accessStatus = accessStatus;
    setAccessStatusIsSet(true);
    this.accessProgress = accessProgress;
    setAccessProgressIsSet(true);
    this.algoDescription = algoDescription;
    this.mpimachineList = mpimachineList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskMessage(TaskMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dataType = other.dataType;
    this.taskId = other.taskId;
    this.algoId = other.algoId;
    this.platformId = other.platformId;
    if (other.isSetInputFormat()) {
      this.inputFormat = other.inputFormat;
    }
    if (other.isSetInputPath()) {
      this.inputPath = other.inputPath;
    }
    if (other.isSetOutputPath()) {
      this.outputPath = other.outputPath;
    }
    if (other.isSetParameterPath()) {
      this.parameterPath = other.parameterPath;
    }
    if (other.isSetPackagePath()) {
      this.packagePath = other.packagePath;
    }
    this.taskType = other.taskType;
    if (other.isSetSubmitTime()) {
      this.submitTime = other.submitTime;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetModifyTime()) {
      this.modifyTime = other.modifyTime;
    }
    this.status = other.status;
    this.rate = other.rate;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    this.userId = other.userId;
    if (other.isSetTaskInfo()) {
      this.taskInfo = other.taskInfo;
    }
    this.accessId = other.accessId;
    if (other.isSetAlgoName()) {
      this.algoName = other.algoName;
    }
    this.accessStatus = other.accessStatus;
    this.accessProgress = other.accessProgress;
    if (other.isSetAlgoDescription()) {
      this.algoDescription = other.algoDescription;
    }
    if (other.isSetMpimachineList()) {
      java.util.List<String> __this__mpimachineList = new java.util.ArrayList<String>(other.mpimachineList);
      this.mpimachineList = __this__mpimachineList;
    }
  }

  public TaskMessage deepCopy() {
    return new TaskMessage(this);
  }

  @Override
  public void clear() {
    setDataTypeIsSet(false);
    this.dataType = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setAlgoIdIsSet(false);
    this.algoId = 0;
    setPlatformIdIsSet(false);
    this.platformId = 0;
    this.inputFormat = null;
    this.inputPath = null;
    this.outputPath = null;
    this.parameterPath = null;
    this.packagePath = null;
    setTaskTypeIsSet(false);
    this.taskType = 0;
    this.submitTime = null;
    this.startTime = null;
    this.endTime = null;
    this.modifyTime = null;
    setStatusIsSet(false);
    this.status = 0;
    setRateIsSet(false);
    this.rate = 0;
    this.errMsg = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.taskInfo = null;
    setAccessIdIsSet(false);
    this.accessId = 0;
    this.algoName = null;
    setAccessStatusIsSet(false);
    this.accessStatus = 0;
    setAccessProgressIsSet(false);
    this.accessProgress = 0;
    this.algoDescription = null;
    this.mpimachineList = null;
  }

  public int getDataType() {
    return this.dataType;
  }

  public TaskMessage setDataType(int dataType) {
    this.dataType = dataType;
    setDataTypeIsSet(true);
    return this;
  }

  public void unsetDataType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATATYPE_ISSET_ID);
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATATYPE_ISSET_ID);
  }

  public void setDataTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATATYPE_ISSET_ID, value);
  }

  public int getTaskId() {
    return this.taskId;
  }

  public TaskMessage setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getAlgoId() {
    return this.algoId;
  }

  public TaskMessage setAlgoId(int algoId) {
    this.algoId = algoId;
    setAlgoIdIsSet(true);
    return this;
  }

  public void unsetAlgoId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALGOID_ISSET_ID);
  }

  /** Returns true if field algoId is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgoId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALGOID_ISSET_ID);
  }

  public void setAlgoIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALGOID_ISSET_ID, value);
  }

  public int getPlatformId() {
    return this.platformId;
  }

  public TaskMessage setPlatformId(int platformId) {
    this.platformId = platformId;
    setPlatformIdIsSet(true);
    return this;
  }

  public void unsetPlatformId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLATFORMID_ISSET_ID);
  }

  /** Returns true if field platformId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLATFORMID_ISSET_ID);
  }

  public void setPlatformIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLATFORMID_ISSET_ID, value);
  }

  public String getInputFormat() {
    return this.inputFormat;
  }

  public TaskMessage setInputFormat(String inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  public void unsetInputFormat() {
    this.inputFormat = null;
  }

  /** Returns true if field inputFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetInputFormat() {
    return this.inputFormat != null;
  }

  public void setInputFormatIsSet(boolean value) {
    if (!value) {
      this.inputFormat = null;
    }
  }

  public String getInputPath() {
    return this.inputPath;
  }

  public TaskMessage setInputPath(String inputPath) {
    this.inputPath = inputPath;
    return this;
  }

  public void unsetInputPath() {
    this.inputPath = null;
  }

  /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
  public boolean isSetInputPath() {
    return this.inputPath != null;
  }

  public void setInputPathIsSet(boolean value) {
    if (!value) {
      this.inputPath = null;
    }
  }

  public String getOutputPath() {
    return this.outputPath;
  }

  public TaskMessage setOutputPath(String outputPath) {
    this.outputPath = outputPath;
    return this;
  }

  public void unsetOutputPath() {
    this.outputPath = null;
  }

  /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputPath() {
    return this.outputPath != null;
  }

  public void setOutputPathIsSet(boolean value) {
    if (!value) {
      this.outputPath = null;
    }
  }

  public String getParameterPath() {
    return this.parameterPath;
  }

  public TaskMessage setParameterPath(String parameterPath) {
    this.parameterPath = parameterPath;
    return this;
  }

  public void unsetParameterPath() {
    this.parameterPath = null;
  }

  /** Returns true if field parameterPath is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterPath() {
    return this.parameterPath != null;
  }

  public void setParameterPathIsSet(boolean value) {
    if (!value) {
      this.parameterPath = null;
    }
  }

  public String getPackagePath() {
    return this.packagePath;
  }

  public TaskMessage setPackagePath(String packagePath) {
    this.packagePath = packagePath;
    return this;
  }

  public void unsetPackagePath() {
    this.packagePath = null;
  }

  /** Returns true if field packagePath is set (has been assigned a value) and false otherwise */
  public boolean isSetPackagePath() {
    return this.packagePath != null;
  }

  public void setPackagePathIsSet(boolean value) {
    if (!value) {
      this.packagePath = null;
    }
  }

  public int getTaskType() {
    return this.taskType;
  }

  public TaskMessage setTaskType(int taskType) {
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    return this;
  }

  public void unsetTaskType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  public void setTaskTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKTYPE_ISSET_ID, value);
  }

  public String getSubmitTime() {
    return this.submitTime;
  }

  public TaskMessage setSubmitTime(String submitTime) {
    this.submitTime = submitTime;
    return this;
  }

  public void unsetSubmitTime() {
    this.submitTime = null;
  }

  /** Returns true if field submitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitTime() {
    return this.submitTime != null;
  }

  public void setSubmitTimeIsSet(boolean value) {
    if (!value) {
      this.submitTime = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public TaskMessage setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public TaskMessage setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getModifyTime() {
    return this.modifyTime;
  }

  public TaskMessage setModifyTime(String modifyTime) {
    this.modifyTime = modifyTime;
    return this;
  }

  public void unsetModifyTime() {
    this.modifyTime = null;
  }

  /** Returns true if field modifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTime() {
    return this.modifyTime != null;
  }

  public void setModifyTimeIsSet(boolean value) {
    if (!value) {
      this.modifyTime = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TaskMessage setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getRate() {
    return this.rate;
  }

  public TaskMessage setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public TaskMessage setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public TaskMessage setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getTaskInfo() {
    return this.taskInfo;
  }

  public TaskMessage setTaskInfo(String taskInfo) {
    this.taskInfo = taskInfo;
    return this;
  }

  public void unsetTaskInfo() {
    this.taskInfo = null;
  }

  /** Returns true if field taskInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskInfo() {
    return this.taskInfo != null;
  }

  public void setTaskInfoIsSet(boolean value) {
    if (!value) {
      this.taskInfo = null;
    }
  }

  public int getAccessId() {
    return this.accessId;
  }

  public TaskMessage setAccessId(int accessId) {
    this.accessId = accessId;
    setAccessIdIsSet(true);
    return this;
  }

  public void unsetAccessId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCESSID_ISSET_ID);
  }

  /** Returns true if field accessId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCESSID_ISSET_ID);
  }

  public void setAccessIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCESSID_ISSET_ID, value);
  }

  public String getAlgoName() {
    return this.algoName;
  }

  public TaskMessage setAlgoName(String algoName) {
    this.algoName = algoName;
    return this;
  }

  public void unsetAlgoName() {
    this.algoName = null;
  }

  /** Returns true if field algoName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgoName() {
    return this.algoName != null;
  }

  public void setAlgoNameIsSet(boolean value) {
    if (!value) {
      this.algoName = null;
    }
  }

  public int getAccessStatus() {
    return this.accessStatus;
  }

  public TaskMessage setAccessStatus(int accessStatus) {
    this.accessStatus = accessStatus;
    setAccessStatusIsSet(true);
    return this;
  }

  public void unsetAccessStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCESSSTATUS_ISSET_ID);
  }

  /** Returns true if field accessStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCESSSTATUS_ISSET_ID);
  }

  public void setAccessStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCESSSTATUS_ISSET_ID, value);
  }

  public int getAccessProgress() {
    return this.accessProgress;
  }

  public TaskMessage setAccessProgress(int accessProgress) {
    this.accessProgress = accessProgress;
    setAccessProgressIsSet(true);
    return this;
  }

  public void unsetAccessProgress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCESSPROGRESS_ISSET_ID);
  }

  /** Returns true if field accessProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessProgress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCESSPROGRESS_ISSET_ID);
  }

  public void setAccessProgressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCESSPROGRESS_ISSET_ID, value);
  }

  public String getAlgoDescription() {
    return this.algoDescription;
  }

  public TaskMessage setAlgoDescription(String algoDescription) {
    this.algoDescription = algoDescription;
    return this;
  }

  public void unsetAlgoDescription() {
    this.algoDescription = null;
  }

  /** Returns true if field algoDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgoDescription() {
    return this.algoDescription != null;
  }

  public void setAlgoDescriptionIsSet(boolean value) {
    if (!value) {
      this.algoDescription = null;
    }
  }

  public int getMpimachineListSize() {
    return (this.mpimachineList == null) ? 0 : this.mpimachineList.size();
  }

  public java.util.Iterator<String> getMpimachineListIterator() {
    return (this.mpimachineList == null) ? null : this.mpimachineList.iterator();
  }

  public void addToMpimachineList(String elem) {
    if (this.mpimachineList == null) {
      this.mpimachineList = new java.util.ArrayList<String>();
    }
    this.mpimachineList.add(elem);
  }

  public java.util.List<String> getMpimachineList() {
    return this.mpimachineList;
  }

  public TaskMessage setMpimachineList(java.util.List<String> mpimachineList) {
    this.mpimachineList = mpimachineList;
    return this;
  }

  public void unsetMpimachineList() {
    this.mpimachineList = null;
  }

  /** Returns true if field mpimachineList is set (has been assigned a value) and false otherwise */
  public boolean isSetMpimachineList() {
    return this.mpimachineList != null;
  }

  public void setMpimachineListIsSet(boolean value) {
    if (!value) {
      this.mpimachineList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((Integer)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case ALGO_ID:
      if (value == null) {
        unsetAlgoId();
      } else {
        setAlgoId((Integer)value);
      }
      break;

    case PLATFORM_ID:
      if (value == null) {
        unsetPlatformId();
      } else {
        setPlatformId((Integer)value);
      }
      break;

    case INPUT_FORMAT:
      if (value == null) {
        unsetInputFormat();
      } else {
        setInputFormat((String)value);
      }
      break;

    case INPUT_PATH:
      if (value == null) {
        unsetInputPath();
      } else {
        setInputPath((String)value);
      }
      break;

    case OUTPUT_PATH:
      if (value == null) {
        unsetOutputPath();
      } else {
        setOutputPath((String)value);
      }
      break;

    case PARAMETER_PATH:
      if (value == null) {
        unsetParameterPath();
      } else {
        setParameterPath((String)value);
      }
      break;

    case PACKAGE_PATH:
      if (value == null) {
        unsetPackagePath();
      } else {
        setPackagePath((String)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((Integer)value);
      }
      break;

    case SUBMIT_TIME:
      if (value == null) {
        unsetSubmitTime();
      } else {
        setSubmitTime((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModifyTime();
      } else {
        setModifyTime((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Integer)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case TASK_INFO:
      if (value == null) {
        unsetTaskInfo();
      } else {
        setTaskInfo((String)value);
      }
      break;

    case ACCESS_ID:
      if (value == null) {
        unsetAccessId();
      } else {
        setAccessId((Integer)value);
      }
      break;

    case ALGO_NAME:
      if (value == null) {
        unsetAlgoName();
      } else {
        setAlgoName((String)value);
      }
      break;

    case ACCESS_STATUS:
      if (value == null) {
        unsetAccessStatus();
      } else {
        setAccessStatus((Integer)value);
      }
      break;

    case ACCESS_PROGRESS:
      if (value == null) {
        unsetAccessProgress();
      } else {
        setAccessProgress((Integer)value);
      }
      break;

    case ALGO_DESCRIPTION:
      if (value == null) {
        unsetAlgoDescription();
      } else {
        setAlgoDescription((String)value);
      }
      break;

    case MPIMACHINE_LIST:
      if (value == null) {
        unsetMpimachineList();
      } else {
        setMpimachineList((java.util.List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_TYPE:
      return getDataType();

    case TASK_ID:
      return getTaskId();

    case ALGO_ID:
      return getAlgoId();

    case PLATFORM_ID:
      return getPlatformId();

    case INPUT_FORMAT:
      return getInputFormat();

    case INPUT_PATH:
      return getInputPath();

    case OUTPUT_PATH:
      return getOutputPath();

    case PARAMETER_PATH:
      return getParameterPath();

    case PACKAGE_PATH:
      return getPackagePath();

    case TASK_TYPE:
      return getTaskType();

    case SUBMIT_TIME:
      return getSubmitTime();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case MODIFY_TIME:
      return getModifyTime();

    case STATUS:
      return getStatus();

    case RATE:
      return getRate();

    case ERR_MSG:
      return getErrMsg();

    case USER_ID:
      return getUserId();

    case TASK_INFO:
      return getTaskInfo();

    case ACCESS_ID:
      return getAccessId();

    case ALGO_NAME:
      return getAlgoName();

    case ACCESS_STATUS:
      return getAccessStatus();

    case ACCESS_PROGRESS:
      return getAccessProgress();

    case ALGO_DESCRIPTION:
      return getAlgoDescription();

    case MPIMACHINE_LIST:
      return getMpimachineList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_TYPE:
      return isSetDataType();
    case TASK_ID:
      return isSetTaskId();
    case ALGO_ID:
      return isSetAlgoId();
    case PLATFORM_ID:
      return isSetPlatformId();
    case INPUT_FORMAT:
      return isSetInputFormat();
    case INPUT_PATH:
      return isSetInputPath();
    case OUTPUT_PATH:
      return isSetOutputPath();
    case PARAMETER_PATH:
      return isSetParameterPath();
    case PACKAGE_PATH:
      return isSetPackagePath();
    case TASK_TYPE:
      return isSetTaskType();
    case SUBMIT_TIME:
      return isSetSubmitTime();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case MODIFY_TIME:
      return isSetModifyTime();
    case STATUS:
      return isSetStatus();
    case RATE:
      return isSetRate();
    case ERR_MSG:
      return isSetErrMsg();
    case USER_ID:
      return isSetUserId();
    case TASK_INFO:
      return isSetTaskInfo();
    case ACCESS_ID:
      return isSetAccessId();
    case ALGO_NAME:
      return isSetAlgoName();
    case ACCESS_STATUS:
      return isSetAccessStatus();
    case ACCESS_PROGRESS:
      return isSetAccessProgress();
    case ALGO_DESCRIPTION:
      return isSetAlgoDescription();
    case MPIMACHINE_LIST:
      return isSetMpimachineList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskMessage)
      return this.equals((TaskMessage)that);
    return false;
  }

  public boolean equals(TaskMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dataType = true;
    boolean that_present_dataType = true;
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (this.dataType != that.dataType)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_algoId = true;
    boolean that_present_algoId = true;
    if (this_present_algoId || that_present_algoId) {
      if (!(this_present_algoId && that_present_algoId))
        return false;
      if (this.algoId != that.algoId)
        return false;
    }

    boolean this_present_platformId = true;
    boolean that_present_platformId = true;
    if (this_present_platformId || that_present_platformId) {
      if (!(this_present_platformId && that_present_platformId))
        return false;
      if (this.platformId != that.platformId)
        return false;
    }

    boolean this_present_inputFormat = true && this.isSetInputFormat();
    boolean that_present_inputFormat = true && that.isSetInputFormat();
    if (this_present_inputFormat || that_present_inputFormat) {
      if (!(this_present_inputFormat && that_present_inputFormat))
        return false;
      if (!this.inputFormat.equals(that.inputFormat))
        return false;
    }

    boolean this_present_inputPath = true && this.isSetInputPath();
    boolean that_present_inputPath = true && that.isSetInputPath();
    if (this_present_inputPath || that_present_inputPath) {
      if (!(this_present_inputPath && that_present_inputPath))
        return false;
      if (!this.inputPath.equals(that.inputPath))
        return false;
    }

    boolean this_present_outputPath = true && this.isSetOutputPath();
    boolean that_present_outputPath = true && that.isSetOutputPath();
    if (this_present_outputPath || that_present_outputPath) {
      if (!(this_present_outputPath && that_present_outputPath))
        return false;
      if (!this.outputPath.equals(that.outputPath))
        return false;
    }

    boolean this_present_parameterPath = true && this.isSetParameterPath();
    boolean that_present_parameterPath = true && that.isSetParameterPath();
    if (this_present_parameterPath || that_present_parameterPath) {
      if (!(this_present_parameterPath && that_present_parameterPath))
        return false;
      if (!this.parameterPath.equals(that.parameterPath))
        return false;
    }

    boolean this_present_packagePath = true && this.isSetPackagePath();
    boolean that_present_packagePath = true && that.isSetPackagePath();
    if (this_present_packagePath || that_present_packagePath) {
      if (!(this_present_packagePath && that_present_packagePath))
        return false;
      if (!this.packagePath.equals(that.packagePath))
        return false;
    }

    boolean this_present_taskType = true;
    boolean that_present_taskType = true;
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (this.taskType != that.taskType)
        return false;
    }

    boolean this_present_submitTime = true && this.isSetSubmitTime();
    boolean that_present_submitTime = true && that.isSetSubmitTime();
    if (this_present_submitTime || that_present_submitTime) {
      if (!(this_present_submitTime && that_present_submitTime))
        return false;
      if (!this.submitTime.equals(that.submitTime))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_modifyTime = true && this.isSetModifyTime();
    boolean that_present_modifyTime = true && that.isSetModifyTime();
    if (this_present_modifyTime || that_present_modifyTime) {
      if (!(this_present_modifyTime && that_present_modifyTime))
        return false;
      if (!this.modifyTime.equals(that.modifyTime))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_taskInfo = true && this.isSetTaskInfo();
    boolean that_present_taskInfo = true && that.isSetTaskInfo();
    if (this_present_taskInfo || that_present_taskInfo) {
      if (!(this_present_taskInfo && that_present_taskInfo))
        return false;
      if (!this.taskInfo.equals(that.taskInfo))
        return false;
    }

    boolean this_present_accessId = true;
    boolean that_present_accessId = true;
    if (this_present_accessId || that_present_accessId) {
      if (!(this_present_accessId && that_present_accessId))
        return false;
      if (this.accessId != that.accessId)
        return false;
    }

    boolean this_present_algoName = true && this.isSetAlgoName();
    boolean that_present_algoName = true && that.isSetAlgoName();
    if (this_present_algoName || that_present_algoName) {
      if (!(this_present_algoName && that_present_algoName))
        return false;
      if (!this.algoName.equals(that.algoName))
        return false;
    }

    boolean this_present_accessStatus = true;
    boolean that_present_accessStatus = true;
    if (this_present_accessStatus || that_present_accessStatus) {
      if (!(this_present_accessStatus && that_present_accessStatus))
        return false;
      if (this.accessStatus != that.accessStatus)
        return false;
    }

    boolean this_present_accessProgress = true;
    boolean that_present_accessProgress = true;
    if (this_present_accessProgress || that_present_accessProgress) {
      if (!(this_present_accessProgress && that_present_accessProgress))
        return false;
      if (this.accessProgress != that.accessProgress)
        return false;
    }

    boolean this_present_algoDescription = true && this.isSetAlgoDescription();
    boolean that_present_algoDescription = true && that.isSetAlgoDescription();
    if (this_present_algoDescription || that_present_algoDescription) {
      if (!(this_present_algoDescription && that_present_algoDescription))
        return false;
      if (!this.algoDescription.equals(that.algoDescription))
        return false;
    }

    boolean this_present_mpimachineList = true && this.isSetMpimachineList();
    boolean that_present_mpimachineList = true && that.isSetMpimachineList();
    if (this_present_mpimachineList || that_present_mpimachineList) {
      if (!(this_present_mpimachineList && that_present_mpimachineList))
        return false;
      if (!this.mpimachineList.equals(that.mpimachineList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + dataType;

    hashCode = hashCode * 8191 + taskId;

    hashCode = hashCode * 8191 + algoId;

    hashCode = hashCode * 8191 + platformId;

    hashCode = hashCode * 8191 + ((isSetInputFormat()) ? 131071 : 524287);
    if (isSetInputFormat())
      hashCode = hashCode * 8191 + inputFormat.hashCode();

    hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
    if (isSetInputPath())
      hashCode = hashCode * 8191 + inputPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
    if (isSetOutputPath())
      hashCode = hashCode * 8191 + outputPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetParameterPath()) ? 131071 : 524287);
    if (isSetParameterPath())
      hashCode = hashCode * 8191 + parameterPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetPackagePath()) ? 131071 : 524287);
    if (isSetPackagePath())
      hashCode = hashCode * 8191 + packagePath.hashCode();

    hashCode = hashCode * 8191 + taskType;

    hashCode = hashCode * 8191 + ((isSetSubmitTime()) ? 131071 : 524287);
    if (isSetSubmitTime())
      hashCode = hashCode * 8191 + submitTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetModifyTime()) ? 131071 : 524287);
    if (isSetModifyTime())
      hashCode = hashCode * 8191 + modifyTime.hashCode();

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + rate;

    hashCode = hashCode * 8191 + ((isSetErrMsg()) ? 131071 : 524287);
    if (isSetErrMsg())
      hashCode = hashCode * 8191 + errMsg.hashCode();

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetTaskInfo()) ? 131071 : 524287);
    if (isSetTaskInfo())
      hashCode = hashCode * 8191 + taskInfo.hashCode();

    hashCode = hashCode * 8191 + accessId;

    hashCode = hashCode * 8191 + ((isSetAlgoName()) ? 131071 : 524287);
    if (isSetAlgoName())
      hashCode = hashCode * 8191 + algoName.hashCode();

    hashCode = hashCode * 8191 + accessStatus;

    hashCode = hashCode * 8191 + accessProgress;

    hashCode = hashCode * 8191 + ((isSetAlgoDescription()) ? 131071 : 524287);
    if (isSetAlgoDescription())
      hashCode = hashCode * 8191 + algoDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetMpimachineList()) ? 131071 : 524287);
    if (isSetMpimachineList())
      hashCode = hashCode * 8191 + mpimachineList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TaskMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgoId()).compareTo(other.isSetAlgoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algoId, other.algoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformId()).compareTo(other.isSetPlatformId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformId, other.platformId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputFormat()).compareTo(other.isSetInputFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFormat, other.inputFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterPath()).compareTo(other.isSetParameterPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterPath, other.parameterPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackagePath()).compareTo(other.isSetPackagePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackagePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packagePath, other.packagePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitTime()).compareTo(other.isSetSubmitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitTime, other.submitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyTime()).compareTo(other.isSetModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, other.modifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskInfo()).compareTo(other.isSetTaskInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskInfo, other.taskInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessId()).compareTo(other.isSetAccessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessId, other.accessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgoName()).compareTo(other.isSetAlgoName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgoName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algoName, other.algoName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessStatus()).compareTo(other.isSetAccessStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessStatus, other.accessStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessProgress()).compareTo(other.isSetAccessProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessProgress, other.accessProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgoDescription()).compareTo(other.isSetAlgoDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgoDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algoDescription, other.algoDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMpimachineList()).compareTo(other.isSetMpimachineList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMpimachineList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mpimachineList, other.mpimachineList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskMessage(");
    boolean first = true;

    sb.append("dataType:");
    sb.append(this.dataType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("algoId:");
    sb.append(this.algoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformId:");
    sb.append(this.platformId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputFormat:");
    if (this.inputFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.inputFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputPath:");
    if (this.inputPath == null) {
      sb.append("null");
    } else {
      sb.append(this.inputPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputPath:");
    if (this.outputPath == null) {
      sb.append("null");
    } else {
      sb.append(this.outputPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterPath:");
    if (this.parameterPath == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packagePath:");
    if (this.packagePath == null) {
      sb.append("null");
    } else {
      sb.append(this.packagePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskType:");
    sb.append(this.taskType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitTime:");
    if (this.submitTime == null) {
      sb.append("null");
    } else {
      sb.append(this.submitTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyTime:");
    if (this.modifyTime == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskInfo:");
    if (this.taskInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.taskInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessId:");
    sb.append(this.accessId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("algoName:");
    if (this.algoName == null) {
      sb.append("null");
    } else {
      sb.append(this.algoName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessStatus:");
    sb.append(this.accessStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessProgress:");
    sb.append(this.accessProgress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("algoDescription:");
    if (this.algoDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.algoDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mpimachineList:");
    if (this.mpimachineList == null) {
      sb.append("null");
    } else {
      sb.append(this.mpimachineList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskMessageStandardScheme getScheme() {
      return new TaskMessageStandardScheme();
    }
  }

  private static class TaskMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataType = iprot.readI32();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALGO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.algoId = iprot.readI32();
              struct.setAlgoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLATFORM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformId = iprot.readI32();
              struct.setPlatformIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INPUT_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inputFormat = iprot.readString();
              struct.setInputFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INPUT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inputPath = iprot.readString();
              struct.setInputPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTPUT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputPath = iprot.readString();
              struct.setOutputPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARAMETER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameterPath = iprot.readString();
              struct.setParameterPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PACKAGE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packagePath = iprot.readString();
              struct.setPackagePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = iprot.readI32();
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUBMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submitTime = iprot.readString();
              struct.setSubmitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyTime = iprot.readString();
              struct.setModifyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rate = iprot.readI32();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TASK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskInfo = iprot.readString();
              struct.setTaskInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessId = iprot.readI32();
              struct.setAccessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ALGO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algoName = iprot.readString();
              struct.setAlgoNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACCESS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessStatus = iprot.readI32();
              struct.setAccessStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ACCESS_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessProgress = iprot.readI32();
              struct.setAccessProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALGO_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algoDescription = iprot.readString();
              struct.setAlgoDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MPIMACHINE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.mpimachineList = new java.util.ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.mpimachineList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMpimachineListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
      oprot.writeI32(struct.dataType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALGO_ID_FIELD_DESC);
      oprot.writeI32(struct.algoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLATFORM_ID_FIELD_DESC);
      oprot.writeI32(struct.platformId);
      oprot.writeFieldEnd();
      if (struct.inputFormat != null) {
        oprot.writeFieldBegin(INPUT_FORMAT_FIELD_DESC);
        oprot.writeString(struct.inputFormat);
        oprot.writeFieldEnd();
      }
      if (struct.inputPath != null) {
        oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
        oprot.writeString(struct.inputPath);
        oprot.writeFieldEnd();
      }
      if (struct.outputPath != null) {
        oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
        oprot.writeString(struct.outputPath);
        oprot.writeFieldEnd();
      }
      if (struct.parameterPath != null) {
        oprot.writeFieldBegin(PARAMETER_PATH_FIELD_DESC);
        oprot.writeString(struct.parameterPath);
        oprot.writeFieldEnd();
      }
      if (struct.packagePath != null) {
        oprot.writeFieldBegin(PACKAGE_PATH_FIELD_DESC);
        oprot.writeString(struct.packagePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
      oprot.writeI32(struct.taskType);
      oprot.writeFieldEnd();
      if (struct.submitTime != null) {
        oprot.writeFieldBegin(SUBMIT_TIME_FIELD_DESC);
        oprot.writeString(struct.submitTime);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.modifyTime != null) {
        oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
        oprot.writeString(struct.modifyTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI32(struct.rate);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
        oprot.writeString(struct.errMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.taskInfo != null) {
        oprot.writeFieldBegin(TASK_INFO_FIELD_DESC);
        oprot.writeString(struct.taskInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCESS_ID_FIELD_DESC);
      oprot.writeI32(struct.accessId);
      oprot.writeFieldEnd();
      if (struct.algoName != null) {
        oprot.writeFieldBegin(ALGO_NAME_FIELD_DESC);
        oprot.writeString(struct.algoName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCESS_STATUS_FIELD_DESC);
      oprot.writeI32(struct.accessStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCESS_PROGRESS_FIELD_DESC);
      oprot.writeI32(struct.accessProgress);
      oprot.writeFieldEnd();
      if (struct.algoDescription != null) {
        oprot.writeFieldBegin(ALGO_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.algoDescription);
        oprot.writeFieldEnd();
      }
      if (struct.mpimachineList != null) {
        oprot.writeFieldBegin(MPIMACHINE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mpimachineList.size()));
          for (String _iter3 : struct.mpimachineList)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskMessageTupleScheme getScheme() {
      return new TaskMessageTupleScheme();
    }
  }

  private static class TaskMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDataType()) {
        optionals.set(0);
      }
      if (struct.isSetTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetAlgoId()) {
        optionals.set(2);
      }
      if (struct.isSetPlatformId()) {
        optionals.set(3);
      }
      if (struct.isSetInputFormat()) {
        optionals.set(4);
      }
      if (struct.isSetInputPath()) {
        optionals.set(5);
      }
      if (struct.isSetOutputPath()) {
        optionals.set(6);
      }
      if (struct.isSetParameterPath()) {
        optionals.set(7);
      }
      if (struct.isSetPackagePath()) {
        optionals.set(8);
      }
      if (struct.isSetTaskType()) {
        optionals.set(9);
      }
      if (struct.isSetSubmitTime()) {
        optionals.set(10);
      }
      if (struct.isSetStartTime()) {
        optionals.set(11);
      }
      if (struct.isSetEndTime()) {
        optionals.set(12);
      }
      if (struct.isSetModifyTime()) {
        optionals.set(13);
      }
      if (struct.isSetStatus()) {
        optionals.set(14);
      }
      if (struct.isSetRate()) {
        optionals.set(15);
      }
      if (struct.isSetErrMsg()) {
        optionals.set(16);
      }
      if (struct.isSetUserId()) {
        optionals.set(17);
      }
      if (struct.isSetTaskInfo()) {
        optionals.set(18);
      }
      if (struct.isSetAccessId()) {
        optionals.set(19);
      }
      if (struct.isSetAlgoName()) {
        optionals.set(20);
      }
      if (struct.isSetAccessStatus()) {
        optionals.set(21);
      }
      if (struct.isSetAccessProgress()) {
        optionals.set(22);
      }
      if (struct.isSetAlgoDescription()) {
        optionals.set(23);
      }
      if (struct.isSetMpimachineList()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetDataType()) {
        oprot.writeI32(struct.dataType);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetAlgoId()) {
        oprot.writeI32(struct.algoId);
      }
      if (struct.isSetPlatformId()) {
        oprot.writeI32(struct.platformId);
      }
      if (struct.isSetInputFormat()) {
        oprot.writeString(struct.inputFormat);
      }
      if (struct.isSetInputPath()) {
        oprot.writeString(struct.inputPath);
      }
      if (struct.isSetOutputPath()) {
        oprot.writeString(struct.outputPath);
      }
      if (struct.isSetParameterPath()) {
        oprot.writeString(struct.parameterPath);
      }
      if (struct.isSetPackagePath()) {
        oprot.writeString(struct.packagePath);
      }
      if (struct.isSetTaskType()) {
        oprot.writeI32(struct.taskType);
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeString(struct.submitTime);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetModifyTime()) {
        oprot.writeString(struct.modifyTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRate()) {
        oprot.writeI32(struct.rate);
      }
      if (struct.isSetErrMsg()) {
        oprot.writeString(struct.errMsg);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetTaskInfo()) {
        oprot.writeString(struct.taskInfo);
      }
      if (struct.isSetAccessId()) {
        oprot.writeI32(struct.accessId);
      }
      if (struct.isSetAlgoName()) {
        oprot.writeString(struct.algoName);
      }
      if (struct.isSetAccessStatus()) {
        oprot.writeI32(struct.accessStatus);
      }
      if (struct.isSetAccessProgress()) {
        oprot.writeI32(struct.accessProgress);
      }
      if (struct.isSetAlgoDescription()) {
        oprot.writeString(struct.algoDescription);
      }
      if (struct.isSetMpimachineList()) {
        {
          oprot.writeI32(struct.mpimachineList.size());
          for (String _iter4 : struct.mpimachineList)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.dataType = iprot.readI32();
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.algoId = iprot.readI32();
        struct.setAlgoIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.platformId = iprot.readI32();
        struct.setPlatformIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.inputFormat = iprot.readString();
        struct.setInputFormatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.inputPath = iprot.readString();
        struct.setInputPathIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outputPath = iprot.readString();
        struct.setOutputPathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.parameterPath = iprot.readString();
        struct.setParameterPathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.packagePath = iprot.readString();
        struct.setPackagePathIsSet(true);
      }
      if (incoming.get(9)) {
        struct.taskType = iprot.readI32();
        struct.setTaskTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.submitTime = iprot.readString();
        struct.setSubmitTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.modifyTime = iprot.readString();
        struct.setModifyTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rate = iprot.readI32();
        struct.setRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.errMsg = iprot.readString();
        struct.setErrMsgIsSet(true);
      }
      if (incoming.get(17)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.taskInfo = iprot.readString();
        struct.setTaskInfoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.accessId = iprot.readI32();
        struct.setAccessIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.algoName = iprot.readString();
        struct.setAlgoNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.accessStatus = iprot.readI32();
        struct.setAccessStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.accessProgress = iprot.readI32();
        struct.setAccessProgressIsSet(true);
      }
      if (incoming.get(23)) {
        struct.algoDescription = iprot.readString();
        struct.setAlgoDescriptionIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mpimachineList = new java.util.ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.mpimachineList.add(_elem6);
          }
        }
        struct.setMpimachineListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

